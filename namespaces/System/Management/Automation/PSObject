Wraps an object providing alternate views of the available members and ways to extend them. Members can be methods, properties, parameterized properties, etc.


In fact, many objects in PowerShell are simply empty PSObjects with extended members.
  For example, the only significant members of objects created via New-Object
  -TypeName PSObject are extended members. Import-Csv creates custom PSObjects
  with extended properties created from the rows of the underlying file;
  Select-Object works similarly with properties of an input object. Some cmdlets,
  such as SharePoint's Get-SPFarmConfig, return PSObjects representing
  configuration details solely as extended properties.

-----------------

   Compare with System.Management.Automation.PSCustomObject

      https://social.technet.microsoft.com/Forums/scriptcenter/en-US/dcfa43ba-812f-4274-b5b2-caa0e2d56988/psobject-vs-systemobject?forum=ITCG

      $ht = @{ num = 42; txt = 'hello world' }

      ([PSObject]                          $ht ).GetType().FullName    # System.Collections.Hashtable
      ([PSCustomObject]                    $ht ).GetType().FullName    # System.Management.Automation.PSCustomObject
      (new-object -type psObject -property $ht ).GetType().FullName    # System.Management.Automation.PSCustomObject
      (new-object       psObject -property $ht ).GetType().FullName    # System.Management.Automation.PSCustomObject
     
      $obj = new-object system.object -property $ht #  ✗ The member "num" was not found for the specified .NET object.
      $obj = new-object psObject      -property $ht #  ✓


-------------------------------
